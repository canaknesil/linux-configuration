#+TITLE: Emacs Configuration
#+AUTHOR: Can Aknesil
#+STARTUP: content
#+OPTIONS: toc:nil

* Package and use-package
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Melpa
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

  (package-initialize)

  ;; Ensure that use-package is installed.
  ;;
  ;; If use-package isn't already installed, it's extremely likely that this is a
  ;; fresh installation! So we'll want to update the package repository and
  ;; install use-package before loading the literate configuration.
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    ;; (add-to-list 'load-path "<path where use-package is installed>")
    (require 'use-package))

  ;; Install packages if not already available.
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  ;; Always compile packages, and use the newest version available.
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC
  
* Appearance
** Start as maximized window
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Line numbers
#+begin_src emacs-lisp
  (if (version<= "26.0.50" emacs-version)
      (global-display-line-numbers-mode)
    (global-linum-mode t))
#+end_src

** TODO Theme
#+BEGIN_SRC emacs-lisp
  ;; To load custom theme
  ;;(load "~/emacs-themes/fternoon-theme-source-code.el")
  ;;(load-theme 'afternoon t)

  (load-theme 'tango-dark)

  ;; Custom background (re-evaluate only first 2 lines to overwrite)
  (setq my-custom-background "#300028")
  (set-background-color my-custom-background) ;; Only sets current frame.
  ;; For future frames.
  (add-hook 'after-make-frame-functions
	    (lambda (frame)
	      (select-frame frame)
	      (set-background-color my-custom-background)))

  ;; BUG: When using as daemon and open emacs in terminal using
  ;; "emacsclient -c" background is very bright blue or red.

  ;; Custom highigh background, default is too bright.
  ;; swiper-line-face inherits from highlight
  (set-face-attribute 'highlight nil :background "#807000")
#+END_SRC
   
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (require 'hl-line)
  (set-face-background 'hl-line "#402040")
  (set-face-foreground 'highlight nil)
  (global-hl-line-mode 1)
#+END_SRC

** Font size
#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'default nil :height 120)
#+END_SRC

** Hide tool bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** Hide menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

** Hide Scroll bar 
#+BEGIN_SRC emacs-lisp
  ;; Wrong way:
  ;; because display-graphic-p returns always nil when started as daemon.
  ;; (when (display-graphic-p) 
  ;;   (scroll-bar-mode -1))

  ;; scroll-bar-mode is void when opened in terminal mode. 
  (when (boundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  ;; Hide minibuffer scroll bar
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

** Do not open startup GNU Emacs buffer
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** Golden ratio windows
#+begin_src emacs-lisp
  (use-package golden-ratio
    :config
    (golden-ratio-mode 1))
#+end_src

** TODO Highlight indentation
#+begin_src emacs-lisp
  ;; This is not good, only counts spaces.
  ;;(add-hook 'prog-mode-hook #'highlight-indentation-mode)

  ;; Find a good package.
#+end_src
** TODO Highlight uncommitted changes
#+BEGIN_SRC emacs-lisp
  ;; Highigh uncommitted changes on the fringe
  (use-package diff-hl
    :config
    (global-diff-hl-mode))

  ;; Fringe does not work on terminal.
  ;; display-graphic-p returns always nil when started as daemon.
  ;; Find a way to enable fringe mode for X, even using as daemon,
  ;; while still using margin mode with terminal.
#+END_SRC

* Functionality
** Auto-fill mode for text buffers
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Aggressive fill paragraph mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package aggressive-fill-paragraph
  ;;   :commands afp-setup-recommended-hooks
  ;;   :init
  ;;   (afp-setup-recommended-hooks))
#+END_SRC

** Scroll animation
#+BEGIN_SRC emacs-lisp
  ;; (load "~/Documents/repos/scroll-animation.el/scroll-animation.el")
#+END_SRC
  
** On the fly spell check
#+BEGIN_SRC emacs-lisp
  ;; On the fly spell check for text mode (requires ispell program, e.g. GNU Aspell)
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda ()
                     (flyspell-buffer)
                     (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC

** Company completion (core only)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0)
    :init
    (add-hook 'after-init-hook #'global-company-mode))
#+END_SRC

** Camelcase as separate words 
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

** Confirm closing
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Show matching parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
#+END_SRC

** TODO Smartparens
#+begin_src emacs-lisp
  ;; (use-package smartparens
  ;;   :config
  ;;   ;;(require 'smartparens-config) ; Enable default configuration
  ;;   (add-hook 'prog-mode-hook #'smartparens-mode)
  ;;   (setq sp-highlight-pair-overlay nil)
  ;;   (setq sp-highlight-wrap-overlay nil)
  ;;   (setq sp-highlight-wrap-tag-overlay nil))

  ;; TODO: Find a better package. smartparens is too aggressive. 
#+end_src
** All backups to a specific directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/emacs-tmp")))
#+END_SRC

** Which-key (display possible keys while typing a command)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** Helpful (better help buffers)
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :config
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key))
#+END_SRC

** Ivy, swiper, and counsel setup
   Ivy (better minibuffer completion)
   Swiper (better i-r-search)
   Counsel (better usage of Ivy)

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    ;; Recommended config for new users
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-height 20)
    (setq ivy-fixed-height-minibuffer t)
    ;; Additional config from me
    (setq ivy-re-builders-alist
	  '((t . ivy--regex-ignore-order))) ; ignore order of space separated words.
    )

  (use-package swiper
    :bind (("C-s" . 'swiper-isearch)
	   ("C-r" . 'swiper-isearch-backward)))

  (use-package counsel
    :bind (("M-x" . 'counsel-M-x)
	   ("C-x C-f" . 'counsel-find-file)
	   ("M-y" . 'counsel-yank-pop)
	   ("C-x b" . 'ivy-switch-buffer)
	   ("C-c v" . 'ivy-push-view)
	   ("C-c V" . 'ivy-pop-view)))
#+END_SRC

** Switch to new window after creation, delete window after killing buffer
#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (defun delete-window-and-balance ()
    "Balance windows after invoking C-x 0."
    (interactive)
    (delete-window)
    (balance-windows))

  (defun kill-buffer-and-delete-window ()
    "Delete current window after killing buffer, if there are more than 1 windows."
    (interactive)
    (kill-buffer)
    (if (> (count-windows) 1)
	(delete-window-and-balance)))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
  (global-set-key (kbd "C-x 0") 'delete-window-and-balance)
  (global-set-key (kbd "C-x j") 'kill-buffer-and-delete-window)
#+END_SRC

#+RESULTS:
: kill-buffer-and-delete-window

** Flycheck (on-the-fly syntax check)
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

  ;; Using pylint for Python syntax checking.
  ;; Configuration is in ~/.pylintrc
#+END_SRC

** Dumb Jump (jump to definition)
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config
    (dumb-jump-mode))
#+END_SRC

** Enable mouse in terminal
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode t)
#+END_SRC

** Recent files
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \M-f" 'recentf-open-files)

  ;; Save recent file list every 5 min in case of abrupt exit.
  (defun recentf-save-list-without-message ()
    (let ((inhibit-message t))
      (recentf-save-list)))

  (run-at-time nil (* 5 60) 'recentf-save-list-without-message)

  ;; Exclude internal recentf file.
  (add-to-list 'recentf-exclude (expand-file-name recentf-save-file))
  (recentf-cleanup)
#+END_SRC

** Restart emacs from within
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :config
    (setq restart-emacs-restore-frames t)
    )
#+END_SRC

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay      0.5
	    treemacs-directory-name-transformer    #'identity
	    treemacs-display-in-side-window        t
	    treemacs-eldoc-display                 t
	    treemacs-file-event-delay              5000
	    treemacs-file-extension-regex          treemacs-last-period-regex-value
	    treemacs-file-follow-delay             0.2
	    treemacs-file-name-transformer         #'identity
	    treemacs-follow-after-init             t
	    treemacs-git-command-pipe              ""
	    treemacs-goto-tag-strategy             'refetch-index
	    treemacs-indentation                   2
	    treemacs-indentation-string            " "
	    ;;treemacs-is-never-other-window         nil
	    treemacs-is-never-other-window         t
	    treemacs-max-git-entries               5000
	    treemacs-missing-project-action        'ask
	    treemacs-move-forward-on-expand        nil
	    treemacs-no-png-images                 nil
	    treemacs-no-delete-other-windows       t
	    treemacs-project-follow-cleanup        nil
	    treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                      'left
	    treemacs-recenter-distance             0.1
	    treemacs-recenter-after-file-follow    nil
	    treemacs-recenter-after-tag-follow     nil
	    treemacs-recenter-after-project-jump   'always
	    treemacs-recenter-after-project-expand 'on-distance
	    treemacs-show-cursor                   nil
	    treemacs-show-hidden-files             t
	    treemacs-silent-filewatch              nil
	    treemacs-silent-refresh                nil
	    treemacs-sorting                       'alphabetic-asc
	    treemacs-space-between-root-nodes      t
	    treemacs-tag-follow-cleanup            t
	    treemacs-tag-follow-delay              1.5
	    treemacs-user-mode-line-format         nil
	    treemacs-user-header-line-format       nil
	    treemacs-width                         35
	    treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  ;; (use-package treemacs-evil
  ;;   :after treemacs evil
  ;;   :ensure t)

  ;; (use-package treemacs-projectile
  ;;   :after treemacs projectile
  ;;   :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  ;; (use-package treemacs-magit
  ;;   :after treemacs magit
  ;;   :ensure t)

  ;; (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
  ;;   :after treemacs persp-mode ;;or perspective vs. persp-mode
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Perspectives))
#+end_src
** Move text
#+begin_src emacs-lisp
  (use-package move-text
    :config
    (move-text-default-bindings))
#+end_src
* Programming languages & Modes
** Verilog
#+BEGIN_SRC emacs-lisp
  (setq verilog-auto-newline nil)
#+END_SRC
   
** Julia
#+BEGIN_SRC emacs-lisp
  ;; Old way
  ;;(add-to-list 'load-path "/Users/canaknesil/seperate-programs/julia-emacs")
  ;;(require 'julia-mode)

  ;; New way
  (use-package julia-mode)
#+END_SRC

** LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex ; latex support for company
    :defer t ; This line is needed (for some reason)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil))
  (use-package auctex-latexmk) ;; latexmk support for auctex
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :commands org-bullets-mode
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (python . t)
     (shell . t)
     ))

  (setq org-babel-python-command "python3 -q")
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
  ;; Dired ls options
  (setq-default dired-listing-switches "-alh")
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :init
    (elpy-enable)
    :config
    ;; Fall back to completion via shell.
    ;;(setq elpy-get-info-from-shell t)
    )

  ;; Run M-x elpy-config
  ;; From there you can install necessary packages for elpy.
  ;; Packages automatically installed at RPC virtual environment. 
#+END_SRC

** Arduino
#+BEGIN_SRC emacs-lisp
  (use-package arduino-mode)
  (use-package company-arduino)
#+END_SRC

** OpenSCAD
#+BEGIN_SRC emacs-lisp
  (use-package scad-mode)
#+END_SRC
** Gitignore
#+BEGIN_SRC emacs-lisp
  (use-package gitignore-mode)
#+END_SRC

* Shortcut commands
#+BEGIN_SRC emacs-lisp
  ;; Byte compile and load the elisp buffer
  (define-key emacs-lisp-mode-map (kbd "C-c C-c")
    'emacs-lisp-byte-compile-and-load)

  ;; Run .emacs
  (defun reload-config ()
    (interactive)
    (load-file "~/.emacs"))
#+END_SRC


* Done
#+BEGIN_SRC emacs-lisp
  (message "emacs.org last block done.")
#+END_SRC
