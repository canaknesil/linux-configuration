#+TITLE: Basic Emacs Configuration
#+AUTHOR: Can Aknesil
#+STARTUP: content
#+OPTIONS: toc:nil

* Appearance
** Start as maximized window
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Line numbers
#+begin_src emacs-lisp
  (if (version<= "26.0.50" emacs-version)
      (global-display-line-numbers-mode)
    (global-linum-mode t))
#+end_src

** Theme
#+BEGIN_SRC emacs-lisp
  ;; To load custom theme
  ;;(load "~/emacs-themes/afternoon-theme-source-code.el")
  ;;(load-theme 'afternoon t)

  (load-theme 'tango-dark)

  ;; Beware that terminals use a smaller number of colors
  ;; (list-colors-display). If a non-supported color is entered, it is
  ;; replaced with the smallest-distanced supported color.


  ;; The following way of setting custom background is bad. It works
  ;; with x-display and with daemon but not with terminal display. When
  ;; running emacs from terminal (emacs -nw)
  ;; tty-run-terminal-initialization is called after the init file,
  ;; which sets the background to default via frame-set-background-mode.

  ;; Custom background (re-evaluate only first 2 lines to overwrite)
  ;;(setq my-custom-background "#300028")
  ;;(set-background-color my-custom-background) ;; Only sets current frame.
  ;; For future frames.
  ;; (add-hook 'after-make-frame-functions
  ;; 	  (lambda (frame)
  ;; 	    (select-frame frame)
  ;; 	    (set-background-color my-custom-background)))


  ;; Custom background
  (cond ((daemonp)
	 (set-face-background 'default "#1c1c1c") ;; daemon in terminal (emacsclient -nw)
	 (add-hook 'after-make-frame-functions    ;; daemon as window (emacsclient -c)
		   (lambda (frame)
		     (select-frame frame)
		     (when (display-graphic-p)
		       (set-background-color "#001800")))))
	((not (display-graphic-p)) (set-face-background 'default "#1c1c1c"))
	((display-graphic-p) (set-face-background 'default "#300028")))


  ;; Custom highigh background, default is too bright.
  ;; swiper-line-face inherits from highlight
  (set-face-attribute 'highlight nil :background "#807000")

  ;; show-paren-mode match background is too bright, not seeing the delimiter.
  (set-face-background 'show-paren-match "#990000")
  (set-face-foreground 'show-paren-match "#ccccff")
#+END_SRC
   
** Font and its size
#+BEGIN_SRC emacs-lisp
  (setq my-custom-font nil)
  (setq my-custom-font-size nil)

  (defun set-font (font)
    (set-face-attribute 'default nil :font font))

  (defun set-font-size (font-size)
    (set-face-attribute 'default nil :height font-size))
  
  (add-hook 'after-make-frame-functions
	    (lambda (frame)
	      (select-frame frame)
	      (if my-custom-font
		  (set-font my-custom-font))
	      (if my-custom-font-size
		  (set-font-size my-custom-font-size))))

  ;; The following function should be called for font configuration.
  (defun configure-font (font)
    (setq my-custom-font font)
    (set-font font))

  (defun configure-font-size (font-size)
    "Font size is around 110."
    (setq my-custom-font-size font-size)
    (set-font-size font-size))
#+END_SRC

** Hide tool bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** Hide menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

** Hide Scroll bar 
#+BEGIN_SRC emacs-lisp
  ;; Wrong way:
  ;; because display-graphic-p returns always nil when started as daemon.
  ;; (when (display-graphic-p) 
  ;;   (scroll-bar-mode -1))

  ;; scroll-bar-mode is void when opened in terminal mode. 
  (when (boundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  ;; Hide minibuffer scroll bar
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

** Do not open startup GNU Emacs buffer
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** TODO Highlight indentation
#+begin_src emacs-lisp
  ;; This is not good, only counts spaces.
  ;;(add-hook 'prog-mode-hook #'highlight-indentation-mode)

  ;; Find a good package.
#+end_src


* Functionality
** Line wrap for text buffers
#+BEGIN_SRC emacs-lisp
  ;;(add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

** On the fly spell check
#+BEGIN_SRC emacs-lisp
  ;; On the fly spell check for text mode (requires ispell program, e.g. GNU Aspell)
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda ()
                     (flyspell-buffer)
                     (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC

** CamelCase as separate words 
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

** Confirm closing
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Show matching parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
#+END_SRC

** All backups to a specific directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/emacs-tmp")))
#+END_SRC

** Switch to new window after creation, delete window after killing buffer
#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (defun delete-window-and-balance ()
    "Balance windows after invoking C-x 0."
    (interactive)
    (delete-window)
    (balance-windows))

  (defun kill-buffer-and-delete-window ()
    "Delete current window after killing buffer, if there are more than 1 windows."
    (interactive)
    (kill-buffer)
    (if (> (count-windows) 1)
	(delete-window-and-balance)))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
  (global-set-key (kbd "C-x 0") 'delete-window-and-balance)
  (global-set-key (kbd "C-x j") 'kill-buffer-and-delete-window)
#+END_SRC

#+RESULTS:
: kill-buffer-and-delete-window

** Enable mouse in terminal
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode t)
#+END_SRC

** Recent files
#+BEGIN_SRC emacs-lisp
  ;; ivy, counsel, swiper handles this

  ;; (recentf-mode 1)
  ;; (setq recentf-max-menu-items 25)
  ;; (setq recentf-max-saved-items 25)
  ;; (global-set-key "\C-x\ \M-f" 'recentf-open-files)

  ;; ;; Save recent file list every 5 min in case of abrupt exit.
  ;; (defun recentf-save-list-without-message ()
  ;;   (let ((inhibit-message t))
  ;;     (recentf-save-list)))

  ;; (run-at-time nil (* 5 60) 'recentf-save-list-without-message)

  ;; ;; Exclude internal recentf file.
  ;; (add-to-list 'recentf-exclude (expand-file-name recentf-save-file))
  ;; (recentf-cleanup)
#+END_SRC

** Home directory on Windows
#+BEGIN_SRC emacs-lisp
  ;; On windows 10 default home directory for emacs is C:\Users\canaknesil\AppData\Roaming
  ;; Changing it to default home directory outside emacs.
  ;; Note that when emacs is starting it uses the old home to look for .emacs file.

  (when (eq system-type 'windows-nt)
    (setenv "EMACS_HOME" (getenv "Home"))
    (setenv "Home" (getenv "UserProfile")))
#+END_SRC

* Programming languages & Modes
** Verilog
#+BEGIN_SRC emacs-lisp
  (setq verilog-auto-newline nil)
#+END_SRC
   
** Dired
#+BEGIN_SRC emacs-lisp
  ;; Dired ls options
  (setq-default dired-listing-switches "-alh")
#+END_SRC


* Shortcut commands
#+BEGIN_SRC emacs-lisp
  ;; Byte compile and load the elisp buffer
  (define-key emacs-lisp-mode-map (kbd "C-c C-c")
    'emacs-lisp-byte-compile-and-load)

  ;; Run .emacs
  (defun reload-config ()
    (interactive)
    (load-file "~/.emacs"))
#+END_SRC


* Done
#+BEGIN_SRC emacs-lisp
  (message "emacs-base.org last block done.")
#+END_SRC
