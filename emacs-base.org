#+TITLE: Basic Emacs Configuration
#+AUTHOR: Can Aknesil
#+STARTUP: content
#+OPTIONS: toc:nil

The configuration in emacs-base.org and emacs.org is up-to-date with
Emacs version 29, and requires Emacs version 29.

Emacs configuration is divided into two files:

emacs-base.org : Configuration that does not depend on additional
packages. Can be used when a basic, fast configuration is desired,
e.g. on a Raspberry Pi.

emacs.org : Remaining of the configuration that depends on additional
packages. Should be used in addition to emacs-base.org for full
configuration.

* Emacs compilation and setup

On Windows, Gpg4win must be installed and accessible. Emacs does not
work correctly with GnuPG installed via MSYS2.

When compiling Emacs, put the source directory somewhere permanent and
don't delete afterwards. During compilation, Emacs sets
source-directory variable to this directory. This way Emacs can find
source code without any additional configuration.

First, start Emacs with emacs-base.org only. Run M-x
package-refresh-contents. And exit.

Second, start Emacs with both emacs-base.org and emacs.org. Packages
will installed automatically.

Example .emacs file:

#+BEGIN_SRC emacs-lisp
  ;;(org-babel-load-file "~/Programs/linux-configuration/emacs-base.org")
  ;;(org-babel-load-file "~/Programs/linux-configuration/emacs.org")

  ;;(configure-font "Cascadia Code-10")
#+END_SRC


* Initial configuration
** HOME and Startup Directories on Windows
#+BEGIN_SRC emacs-lisp
  ;; On Windows, the directory Emacs treats as home defaults to the
  ;; user-specific application data directory. .emacs is expected to be
  ;; there. The user-specific application data directory depends on the
  ;; Windows version. This can be overwritten by defining HOME
  ;; environment variable.

  ;; The initial default-directory at Emacs start-up depends on from
  ;; where it is started. find-file starts from the default directory. I
  ;; want it to be the home directory unless Emacs is started with
  ;; visiting a file.

  (when (eq system-type 'windows-nt)
    ;; Set home directory correctly independent from weather HOME
    ;; environment variable is defined.
    (setenv "EMACS_HOME" (getenv "Home"))
    (setenv "Home" (getenv "UserProfile"))
    ;; Set the default-directory to home, at the initial buffer.
    (setq default-directory "~/"))
#+END_SRC


* Editing
** Line numbers
#+begin_src emacs-lisp
  (if (version<= "26.0.50" emacs-version)
      (global-display-line-numbers-mode)
    (global-linum-mode t))
#+end_src

** Theme
#+BEGIN_SRC emacs-lisp
  ;; To load custom theme
  ;;(load "~/emacs-themes/afternoon-theme-source-code.el")
  ;;(load-theme 'afternoon t)

  (load-theme 'tango-dark)

  ;; Beware that terminals use a smaller number of colors
  ;; (list-colors-display). If a non-supported color is entered, it is
  ;; replaced with the smallest-distanced supported color.


  ;; The following way of setting custom background is bad. It works
  ;; with x-display and with daemon but not with terminal display. When
  ;; running emacs from terminal (emacs -nw)
  ;; tty-run-terminal-initialization is called after the init file,
  ;; which sets the background to default via frame-set-background-mode.

  ;; Custom background (re-evaluate only first 2 lines to overwrite)
  ;;(setq my-custom-background "#300028")
  ;;(set-background-color my-custom-background) ;; Only sets current frame.
  ;; For future frames.
  ;; (add-hook 'after-make-frame-functions
  ;; 	  (lambda (frame)
  ;; 	    (select-frame frame)
  ;; 	    (set-background-color my-custom-background)))


  ;; Custom background
  ;; Try to reduce blue light in the background.
  (cond ((daemonp)
	 (set-face-background 'default "#181818") ;; daemon in terminal
	 (add-hook 'after-make-frame-functions    ;; daemon as window
		   (lambda (frame)
		     (select-frame frame)
		     (when (display-graphic-p)
		       (set-background-color "#181800")))))
	((not (display-graphic-p)) (set-face-background 'default "#181818")) ;; non-daemon in terminal
	((display-graphic-p) (set-face-background 'default "#201800")))      ;; non-daemon as window

  ;; Default text foreground
  ;; Try to reduce blue light here as well.
  ;; Default for tango is eeeeec.
  (set-face-attribute 'default nil :foreground "#eeeee0")

  ;; Custom highlight background, default is too bright.
  ;; swiper-line-face inherits from highlight
  (set-face-attribute 'highlight nil :background "#605030")

  ;; show-paren-mode match background is too bright, not seeing the delimiter.
  (set-face-background 'show-paren-match "#980000")
  (set-face-foreground 'show-paren-match "#ccccff")

  ;; isearch/swiper match face too bright
  (set-face-background 'isearch "#b04000")
#+END_SRC

** Highlight current line
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
  (set-face-background 'hl-line "#402040")
  (set-face-foreground 'highlight nil)
#+end_src

** Font and its size
#+BEGIN_SRC emacs-lisp
  ;; My old way of setting font and font size

  ;; (setq my-custom-font nil)
  ;; (setq my-custom-font-size nil)

  ;; (defun set-font (font)
  ;;   (set-face-attribute 'default nil :font font))

  ;; (defun set-font-size (font-size)
  ;;   (set-face-attribute 'default nil :height font-size))

  ;; (add-hook 'after-make-frame-functions
  ;; 	  (lambda (frame)
  ;; 	    (select-frame frame)
  ;; 	    (if my-custom-font
  ;; 		(set-font my-custom-font))
  ;; 	    (if my-custom-font-size
  ;; 		(set-font-size my-custom-font-size))))

  ;; ;; The following function should be called for font configuration.
  ;; (defun configure-font (font)
  ;;   (setq my-custom-font font)
  ;;   (set-font font))

  ;; (defun configure-font-size (font-size)
  ;;   "Font size is around 110."
  ;;   (setq my-custom-font-size font-size)
  ;;   (set-font-size font-size))


  ;; Font configuration given in Emacs manual
  ;; (add-to-list 'default-frame-alist (cons 'font font))

  (defun configure-font-extra (font)
    ;; Font of key bindings, y-or-n, markdown inline code, etc. inherit
    ;; from fixed-pitch and fixed-pitch-serif. These faces aren't
    ;; affected by the default way of setting fonts recommended in the
    ;; manual. Setting them here.
    (set-face-font 'fixed-pitch font)
    (set-face-font 'fixed-pitch-serif font))

  (defun configure-font (font)
    ;; Font configuration recommended in Emacs manual.
    (add-to-list 'default-frame-alist (cons 'font font))

    ;; Extra configuration is required for some cases.  The following
    ;; configuration doesn't work on Windows. Use customize to apply the
    ;; config.
    (if (daemonp)
	(add-hook 'server-after-make-frame-hook
		  (lambda () (configure-font-extra font)))
      (configure-font-extra font)))

  ;; Usage example (font=Cascadia Code, fontsize=10):
  ;; (configure-font "Cascadia Code-10")
#+END_SRC

** TODO Line wrap for text buffers
#+BEGIN_SRC emacs-lisp
  ;;(add-hook 'text-mode-hook 'turn-on-auto-fill)

  (defun turn-on-visual-line-mode ()
    (visual-line-mode 1))

  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'prog-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)

  ;; Visual line mode rebinds the following keys:
  ;; <remap> <kill-line>              kill-visual-line
  ;; <remap> <move-beginning-of-line> beginning-of-visual-line
  ;; <remap> <move-end-of-line>       end-of-visual-line

  ;; TODO: I want the original bindings of these commands.
#+END_SRC

** Unfill paragraph
#+BEGIN_SRC emacs-lisp
  ;; Unfil paragraph, reverse of fill-paragraph.
  ;; Taken from https://www.emacswiki.org/emacs/UnfillParagraph

  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
	  ;; This would override `fill-column' if it's an integer.
	  (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  ;; Handy key definition
  (keymap-global-set "M-Q" #'unfill-paragraph)
#+END_SRC

** Show matching parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq-default show-paren-delay 0.0)
#+END_SRC

** Matching parentheses
#+BEGIN_SRC emacs-lisp
  ;; Not enabling marentheses matching automatically because I don't
  ;; like it.

  ;; (add-hook 'prog-mode-hook (lambda () (electric-pair-local-mode 1)))

  ;; Another alternative that I previously used is the smartparens
  ;; package.

  ;; (use-package smartparens
  ;;   :config
  ;;   ;;(require 'smartparens-config) ; Enable default configuration
  ;;   (add-hook 'prog-mode-hook #'smartparens-mode)
  ;;   (setq sp-highlight-pair-overlay nil)
  ;;   (setq sp-highlight-wrap-overlay nil)
  ;;   (setq sp-highlight-wrap-tag-overlay nil))

  ;; Implementing a command that inserts two new lines and the closing
  ;; parenthesis and leaves the point at the indented second
  ;; line. Neither built-in features or external packages provide this
  ;; functionality without enabling automatic pair matching.

  (setq my-parens-pairs '(("(" . ")")
			  ("[" . "]")
			  ("{" . "}")))
  (make-variable-buffer-local 'my-parens-pairs)

  (defun my-parens-return ()
    (interactive)
    (let ((opening-paren (string (char-before))))
      (if (not opening-paren)
	  (message "Char before point is out of range.")
	(let ((paren-pair (assoc opening-paren my-parens-pairs)))
	  (if (not paren-pair)
	      (message (format "Opening parenthesis '%s' does not have a match." opening-paren))
	  
	    ;; Everything is ok, perform the job
	    (save-excursion
	      (newline 2)
	      (insert (cdr paren-pair))
	      (indent-for-tab-command))
	    (next-line)
	    (indent-for-tab-command))))))

  (add-hook 'prog-mode-hook
	    (lambda ()
	      (keymap-set prog-mode-map "C-c RET" #'my-parens-return)
	      (keymap-set prog-mode-map "C-c C-<return>" #'my-parens-return)))
#+END_SRC

** Disable beeping
#+begin_src emacs-lisp
  ;; Visible bell instead of sound.
  ;;(setq visible-bell t)

  ;; Disable bell sound
  (setq-default ring-bell-function (lambda ()))
#+end_src

** On the fly spell check
#+BEGIN_SRC emacs-lisp
  ;; Requires an external spell checker, e.g. aspell.
  ;; Also requires a dictionary, e.g. aspell-en.

  ;; Run flyspell with aspell instead of ispell
  ;; source: https://www.emacswiki.org/emacs/FlySpell
  (setq ispell-list-command "--list")

  ;; On the fly spell check for text 
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda ()
		     (flyspell-buffer)
		     (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC

** On the fly syntax check and similar
#+BEGIN_SRC emacs-lisp
  ;; Using flymake. It is built-in.

  ;; Install flake8 python package. Elpy uses it.
  ;; Flake8 configuration is at linux-configuration/flake8.
  ;; Copy or link it to ~/.config/flake8
  ;; The config makes flake8 to ignore several anoying warnings. 


  ;; Old setup with flycheck.

  ;;(use-package flycheck
  ;;  :init (global-flycheck-mode))

  ;; Using pylint for Python syntax checking.
  ;; Configuration is in ~/.pylintrc
#+END_SRC

** CamelCase as separate words 
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)

  ;; Opposite of subword-mode is superword-mode.
#+END_SRC

** Enable mouse in terminal
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode t)
#+END_SRC

** Delete selection when inserting text
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Preserve point location when scrolling
#+BEGIN_SRC emacs-lisp
  (setq-default scroll-preserve-screen-position 1)

  ;; This doesn't preserve point location within window when pixel
  ;; scrolling, which is the desired behavior.
#+END_SRC

** Scroll margin
#+BEGIN_SRC emacs-lisp
  ;; Leave a number of lines on top or bottom when using C-l.
  (setq-default recenter-positions '(middle 2 -2))

  ;; Automatic scrolling when the point is close to the top or the
  ;; bottom.
  ;;(setq-default scroll-margin' 1)

  ;; Disadvantage: This prevents the point to move from one window to
  ;; other in follow-mode.

  ;; Disadvantage: Clicking to the lines at margin triggers
  ;; autoscrolling, which is distracting.

  ;; Didadvantage: Mouse wheel scrolling at the end of the buffer
  ;; triggers auto-scrolling back up.
#+END_SRC

** Pixel scrolling
#+BEGIN_SRC emacs-lisp
  (pixel-scroll-precision-mode 1)
#+END_SRC

** Comment column
#+BEGIN_SRC emacs-lisp
  ;; Make M-; put the comment one space after the current lines text.
  (add-hook 'prog-mode-hook
	    (lambda ()
	      (setq comment-column 0)))
#+END_SRC

** Hide Scroll bar 
#+BEGIN_SRC emacs-lisp
  ;; Wrong way:
  ;; because display-graphic-p returns always nil when started as daemon.
  ;; (when (display-graphic-p) 
  ;;   (scroll-bar-mode -1))

  ;; scroll-bar-mode is void when opened in terminal mode. 
  (when (boundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  ;; Hide minibuffer scroll bar
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC


* Windows
** Move to, delete, or swap with another window directionally with windmove
#+BEGIN_SRC emacs-lisp
  ;; default key bindings are SHIFT-{left, right, up, down}.
  (windmove-default-keybindings)

  ;; default keybindings are C-x SHIFT-{left, right, up, down}.
  (if (version<= "28.1" emacs-version)
      (windmove-delete-default-keybindings))

  ;; default keybindings are SUPER-{left, right, up, down}.
  ;; Altering with C-SHIFT-{left, right, up, down}.
  (if (version<= "28.1" emacs-version)
      (windmove-swap-states-default-keybindings '(control shift)))
#+END_SRC

** Restore window configuration with winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** Switch to new window after creation, delete window after killing buffer
#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (defun delete-window-and-balance ()
    "Balance windows after invoking C-x 0."
    (interactive)
    (delete-window)
    (balance-windows))

  ;; Not needed. C-x 4 0 kill-buffer-and-window does the job.
  ;; (defun kill-buffer-and-delete-window ()
  ;;   "Delete current window after killing buffer, if there are more than 1 windows."
  ;;   (interactive)
  ;;   (kill-buffer)
  ;;   (if (> (count-windows) 1)
  ;;       (delete-window-and-balance)))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
  (global-set-key (kbd "C-x 0") 'delete-window-and-balance)
  ;;(global-set-key (kbd "C-x j") 'kill-buffer-and-delete-window)
#+END_SRC

** Prefer vertical splitting of windows
#+BEGIN_SRC emacs-lisp
  ;; split-height-threshold default is 80.
  ;; split-width-threshold default is 160.
  ;; See window-splittable-p for information.
  (setq-default split-height-threshold 120)
#+END_SRC

** Tab bar (workspaces)
#+BEGIN_SRC emacs-lisp
  (setq-default tab-bar-show nil)

  ;; Documentation is insufficient for tab-bar-tab-hints.
  ;;(setq tab-bar-tab-hints 1)

  ;; tab-bar-history-mode provides same functionality as
  ;; winner-mode. Even the key bindings are the same. Using winner-mode.

  ;;(tab-bar-history-mode 1)
#+END_SRC


* Frames
** Start as maximized window
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Hide tool bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** Hide menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

** Undelete frame
#+BEGIN_SRC emacs-lisp
  (undelete-frame-mode 1)
#+END_SRC

** Delete local buffers when deleting frames
#+BEGIN_SRC emacs-lisp
  ;; Disagvantage: Deleting buffers when deleting a frame is does not go
  ;; with the Emacs philosophy that buffers are independent from windows
  ;; and frames. That's why, doing so breaks some Emacs features. For
  ;; example, undelete-frame doesn't recreate deleted buffers.

  (defvar server-clients)

  (defun can/delete-buffers-local-to-frame (frame)
    "Delete buffers that were exclusively seen by frame."
    (when (>= (seq-length (frame-list)) 2)
      (let* (;; buffers seen by the frame, except minibuffers,
	     ;; *Messages*, *scrath*.
	     (frame-buffers
	      (seq-filter (lambda (b)
			    (and (not (minibufferp b))
				 (not (string= (buffer-name b) "*Messages*"))
				 (not (string= (buffer-name b) "*scratch*"))))
			  (frame-parameter frame 'buffer-list)))

	     ;; buffers opened through the client arguments
	     ;; Client buffers are automatically killed and client is
	     ;; notified at frame deletion.
	     (client-buffers
	      (let ((proc (frame-parameter frame 'client)))
		(if (and proc (memq proc server-clients))
		    (process-get proc 'buffers)
		  nil)))

	     ;; buffers seen exclusively by other frames
	     (other-frames-buffers
	      (cl-reduce #'append
			 (mapcar (lambda (f)
				   (frame-parameter f 'buffer-list))
				 (seq-filter (lambda (f) (not (eq f frame)))
					     (frame-list)))))

	     ;; buffers that won't be deleted
	     (non-local-buffers (append client-buffers other-frames-buffers))

	     ;; buffers that will be deleted
	     (buffers-to-be-deleted
	      (seq-filter (lambda (x) (not (memq x non-local-buffers)))
			  frame-buffers)))

	(can/delete-buffers buffers-to-be-deleted))))


  (defun can/delete-buffers (buffers-to-be-deleted)
    "Delete buffers in buffers-to-be-deleted. Save beforehand if
   necessary. Prompt when saving."
    (save-some-buffers nil
		       (lambda ()
			 (and (buffer-file-name) ;; file visiting buffer
			      (memq (current-buffer) buffers-to-be-deleted))))

    (let ((killed-buffer-names
	   (seq-filter #'identity
		       (mapcar (lambda (b)
				 (let ((name (buffer-name b))
				       (res (kill-buffer b)))
				   (if res name nil)))
			       buffers-to-be-deleted))))

      (message "Killed buffers `%s'." killed-buffer-names)
      killed-buffer-names))


  (defun delete-frame-kill-local-buffers ()
    (interactive)
    (let ((frame (selected-frame)))
      (can/delete-buffers-local-to-frame frame)
      (delete-frame frame)))
  
   

  ;;(add-hook 'delete-frame-functions #'can/delete-buffers-local-to-frame)
#+END_SRC

** Delete frame with C-x C-c
#+BEGIN_SRC emacs-lisp
  (defun can/delete-frame ()
    "Delete frame. If there is only one frame, exit Emacs."
    (interactive)
    (if (>= (seq-length (frame-list)) 2)
	(delete-frame)
      (save-buffers-kill-terminal)))

  (global-set-key (kbd "C-x C-c") 'can/delete-frame)
#+END_SRC

** Ediff in a single frame
#+BEGIN_SRC emacs-lisp
  (setq-default ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

** TODO Saving sessions
#+BEGIN_SRC emacs-lisp
  ;; Using built-in desktop library

  ;; Configure desktop library so that Emacs doesn't restore previous
  ;; session automatically, but the previous session can be restored
  ;; with a command, in case of a crash or an accidental exit.

  ;;(desktop-save-mode 1)
  ;;(setq desktop-restore-frames nil)
#+END_SRC


* Files
** All backups to a specific directory
#+BEGIN_SRC emacs-lisp
  (setq-default backup-directory-alist `(("." . "~/emacs-tmp")))
#+END_SRC

** Auto-save no message
#+BEGIN_SRC emacs-lisp
  (setq-default auto-save-no-message t)
#+END_SRC

** Recent files
#+BEGIN_SRC emacs-lisp
  ;; ivy-switch-buffer handles this

  ;; (recentf-mode 1)
  ;; (setq recentf-max-menu-items 25)
  ;; (setq recentf-max-saved-items 25)
  ;; (global-set-key "\C-x\ \M-f" 'recentf-open-files)

  ;; ;; Save recent file list every 5 min in case of abrupt exit.
  ;; (defun recentf-save-list-without-message ()
  ;;   (let ((inhibit-message t))
  ;;     (recentf-save-list)))

  ;; (run-at-time nil (* 5 60) 'recentf-save-list-without-message)

  ;; ;; Exclude internal recentf file.
  ;; (add-to-list 'recentf-exclude (expand-file-name recentf-save-file))
  ;; (recentf-cleanup)
#+END_SRC


* Miscellaneous
** Do not open startup GNU Emacs buffer
#+BEGIN_SRC emacs-lisp
  (setq-default inhibit-startup-screen t)
#+END_SRC

** Confirm closing
#+BEGIN_SRC emacs-lisp
  (setq-default confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Reload config
#+BEGIN_SRC emacs-lisp
  ;; Run .emacs
  (defun reload-config ()
    (interactive)
    (load-file "~/.emacs"))
#+END_SRC


* Programming languages & Modes
** Verilog
#+BEGIN_SRC emacs-lisp
  (setq-default verilog-auto-newline nil)
#+END_SRC
   
** Dired
#+BEGIN_SRC emacs-lisp
  ;; Dired ls options
  (setq-default dired-listing-switches "-alh")
#+END_SRC

** Vivado XDC
#+BEGIN_SRC emacs-lisp
  ;; Open in Tcl mode
  (add-to-list 'auto-mode-alist '("\\.xdc\\'" . tcl-mode))
#+END_SRC

** C-like languages
#+BEGIN_SRC emacs-lisp
  ;; Indentation offset for C-like languages.
  (setq-default c-basic-offset 3)
#+END_SRC


* Short-hand key bindings
#+BEGIN_SRC emacs-lisp
  (defun duplicate-line-and-next-line ()
    (interactive)
    (duplicate-line)
    (next-line))

  (keymap-global-set "C-c n" #'duplicate-line-and-next-line)
#+END_SRC


* Done
#+BEGIN_SRC emacs-lisp
  (message "emacs-base.org last block done.")
#+END_SRC
