#! /bin/bash

# Copyright (c) 2023 Can Aknesil

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


HELP_STR="Usage:

start-emacs [-t|--terminal] [FILES...]

  Start a new instance. Open FILES, if provided. If --terminal is
  provided, open a new command line instance.

start-emacs -c|--client [FILES...]

  Open FILES in a server frame. Existing frames are reused.  If FILES
  are not specified, always create a new server frame.  If server is
  not running start a new Emacs instence.

start-emacs -h|--help

  Display the help message.
"


POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
	-c|--client)
	    OPTARG_CLIENT=YES
	    shift
	    ;;
	-t|--terminal)
	    OPTARG_TERMINAL=YES
	    shift
	    ;;
	-h|--help)
	    OPTARG_HELP=YES
	    shift
	    ;;
	-*|--*)
	    echo "Unknown option $1"
	    echo "$HELP_STR"
	    exit 1
	    ;;
	*)
	    POSITIONAL_ARGS+=("$1") # save positional arg
	    shift
	    ;;
    esac
done

FILES=$POSITIONAL_ARGS


if [ "$OPTARG_HELP" = YES ]; then
    echo "$HELP_STR"
    exit
fi


if emacsclient -a false -e t > /dev/null 2>&1; then
    SERVER_RUNNING=YES
fi


if [ "$(command -v emacsclientw)" ]; then
    IS_WINDOWS=YES
    # runemacs already exists on Windows, it non-blockingly starts Emacs as a GUI app
    ec=emacsclientw # emacsclient as GUI app (on windows)
else
    runemacs () {
	emacs $@ > /dev/null 2>&1 & disown
    }
    ec=emacsclient
fi


# From Emacs manual: due to limitations of MS-Windows, Emacs cannot
# have both GUI and text-mode frames in the same session. It also
# cannot open text-mode frames on more than a single Command Prompt
# window, because each Windows program can have only one console at
# any given time. For these reasons, if you invoke emacsclient with
# the -c option, and the Emacs server runs in a text-mode session,
# Emacs will always create a new text-mode frame in the same Command
# Prompt window where it was started; a GUI frame will be created only
# if the server runs in a GUI session. Similarly, if you invoke
# emacsclient with the -t option, Emacs will create a GUI frame if the
# server runs in a GUI session, or a text-mode frame when the session
# runs in text mode in a Command Prompt window.


run_cmd () {
    for p in "$@"
    do
	if [ -z "$p" ]
	then
	    echo -n "\"\" "
	else
	    echo -n "$p "
	fi
    done
    echo
    "$@"
}



if [ "$OPTARG_CLIENT" = YES ] && [ "$SERVER_RUNNING" = YES ]; then
    if [ "${FILES[*]}" ]; then
	
        # e --client FILES...
	run_cmd $ec -r -n $FILES
	
    else
	    
	# e --client
	run_cmd $ec -c -n
	
    fi    
else
    # Assuming that server is started in the init file.
    
    if [ "$OPTARG_TERMINAL" = YES ]; then
	
	# e --terminal
	run_cmd emacs -nw $FILES
	
    else

        # e
	run_cmd runemacs $FILES

    fi
fi
