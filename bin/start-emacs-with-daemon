#! /bin/bash

# Copyright (c) 2023 Can Aknesil

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


HELP_STR="Usage:
  start-emacs -h|--help
  Display help message

  start-emacs --terminal [FILES...]
  New Emacs instance in terminal.

  start-emacs [--bind] [FILES...]
  New Emacs instance in X.

  start-emacs --client --terminal [FILES...]
  New Emacs client frame in terminal.

  start-emacs --client --new-frame [--bind] [FILES...]
  New Emacs client frame in X.

  start-emacs --client [--bind] FILES...
  Open files in the most recently created frame.
  Create new frame if necessary.

  start-emacs --client
  New Emacs client frame in X, if there are no.

Options:
  --bind          Wait for Emacs to finish, either by quiting, or via C-#.
                  If not specified, return immediatelly.

  --client        Start Emacs as client. Start daemon if not running.
                  If not specified, start a new Emacs instance.

  -h, --help      Display help message and exit.

  --new-frame     Always create a new frame.

  --terminal      Start new frame in terminal.
                  If not specified, start new frames in X."


POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
	--client)
	    OPTARG_CLIENT=YES
	    shift
	    ;;
	# --display)
	#     OPTARG_DISPLAY="$2"
	#     shift
	#     shift
	#     ;;
	--terminal)
	    OPTARG_TERMINAL=YES
	    shift
	    ;;
	--bind)
	    OPTARG_BIND=YES
	    shift
	    ;;
	--new-frame)
	    OPTARG_NEW_FRAME=YES
	    shift
	    ;;
	-h|--help)
	    OPTARG_HELP=YES
	    shift
	    ;;
	-*|--*)
	    echo "Unknown option $1"
	    echo "$HELP_STR"
	    exit 1
	    ;;
	*)
	    POSITIONAL_ARGS+=("$1") # save positional arg
	    shift
	    ;;
    esac
done

FILES=$POSITIONAL_ARGS


if [ "$OPTARG_HELP" = YES ]; then
    echo "$HELP_STR"
    exit
fi


if [ "$(command -v emacsclientw)" ]; then
   ec=emacsclientw # emacsclient as GUI app (on windows)
else
   ec=emacsclient
fi

# From Emacs manual: due to limitations of MS-Windows, Emacs cannot
# have both GUI and text-mode frames in the same session. It also
# cannot open text-mode frames on more than a single Command Prompt
# window, because each Windows program can have only one console at
# any given time. For these reasons, if you invoke emacsclient with
# the -c option, and the Emacs server runs in a text-mode session,
# Emacs will always create a new text-mode frame in the same Command
# Prompt window where it was started; a GUI frame will be created only
# if the server runs in a GUI session. Similarly, if you invoke
# emacsclient with the -t option, Emacs will create a GUI frame if the
# server runs in a GUI session, or a text-mode frame when the session
# runs in text mode in a Command Prompt window.


run_cmd () {
    for p in "$@"
    do
	if [ -z "$p" ]
	then
	    echo -n "\"\" "
	else
	    echo -n "$p "
	fi
    done
    echo
    "$@"
}


if [ "$OPTARG_CLIENT" = YES ]; then
    if [ "$OPTARG_TERMINAL" = YES ]; then

	#
	# New Emacs client frame in terminal.
	#
	
	# e --client --terminal
	run_cmd $ec -a "" -nw $FILES
	
    else
	if [ "$OPTARG_NEW_FRAME" = YES ]; then

	    #
	    # New Emacs client frame in X.
	    #

	    if [ "$OPTARG_BIND" = YES ]; then
		# e --client --new-frame --bind
		run_cmd $ec -a "" -c $FILES
	    else
		# e --client --new-frame
		run_cmd $ec -a "" -c -n $FILES
	    fi
	    
	else
	    if [ "${FILES[*]}" ]; then

		#
		# Open files in the most recently created frame. Create new frame if necessary.
		#

		
		
		if [ "$OPTARG_BIND" = YES ]; then
		    # e --client --bind FILES...

		    # Note: With the command 'ec [-a ""] [-r] FILES...'
		    # emacsclient generates the following error on
		    # Windows (Emacs version 29.2):

		    # Error: Symbol's value as variable is void: font
		    
		    run_cmd $ec -a "" -r $FILES
		else
		    # e --client FILES...

		    # Note: The following command unintentionally
		    # burries the newly created buffer(s) on
		    # Windows. (Emacs version 29.2).
		    
		    run_cmd $ec -a "" -r -n $FILES
		fi
		
	    else

		#
		# New Emacs client frame in X.
		#

		# Note: Using ec -a "" [-r] [-n] is problematic on
		# Windows (Emacs version 29.2). Sometimes this command
		# fails to create a frame.
		
		# e --client
		run_cmd $ec -a "" -c -n
		
	    fi
	    
	fi
    fi
else
    if [ "$OPTARG_TERMINAL" = YES ]; then

	# 
	# New Emacs instance in terminal.
	#
	
	# e --terminal
	run_cmd emacs -nw $FILES
	
    else

	# 
	# New Emacs instance in X.
	#
	
	if [ "$OPTARG_BIND" = YES ]; then
	    # e --bind
	    run_cmd emacs $FILES
	else
	    # e
	    if [ "$(command -v runemacs)" ]; then
		run_cmd runemacs $FILES
	    else
		run_cmd emacs $FILES 2>&1 >/dev/null & disown
		# On Windows, above command leavs the shell currupted.
	    fi
	fi
	
    fi
fi
